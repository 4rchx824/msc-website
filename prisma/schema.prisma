// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

model Contestent {
  cuid   String   @id @default(cuid())
  name   String
  Record Record[]
  SBOR_Record SBOR_Record[]

  // ContestentSBOR_Record Contestent_SBOR_Record[]
}

model Category {
  cuid          String          @id @default(cuid())
  name          String
  img_url       String?
  Competition   Competition[]
  Discipline    Discipline[]
  SBOR_Category SBOR_Category[]
}

model Discipline {
  cuid String @id @default(cuid())
  name String

  // competition_id String?
  // competition    Competition? @relation(fields: [competition_id], references: [cuid])

  category_id           String
  category              Category                @relation(fields: [category_id], references: [cuid])
  Record                Record[]
  CompetitionDiscipline CompetitionDiscipline[]
}

model CompetitionDiscipline {
  competition_id String
  competition    Competition @relation(fields: [competition_id], references: [cuid])

  discipline_id String
  discipline    Discipline @relation(fields: [discipline_id], references: [cuid])

  @@id([competition_id, discipline_id])
}

model Competition {
  cuid    String   @id @default(cuid())
  name    String
  date    DateTime
  img_url String?

  category   Category @relation(fields: [categoryId], references: [cuid])
  categoryId String

  Record                Record[]
  CompetitionDiscipline CompetitionDiscipline[]
  // Discipline            Discipline[]
}

model Record {
  cuid      String @id @default(cuid())
  raw_score Int
  time      Int?
  points    Float

  discipline_id String
  discipline    Discipline @relation(fields: [discipline_id], references: [cuid])

  contestent_id String
  contestent    Contestent @relation(fields: [contestent_id], references: [cuid])

  competition_id String?
  competition    Competition? @relation(fields: [competition_id], references: [cuid])

  @@unique([contestent_id, discipline_id, competition_id])
}

model SBOR_Category {
  cuid String @id @default(cuid())
  name String
  sbor_record  SBOR_Record[]

  category_id String?
  Category     Category?     @relation(fields: [category_id], references: [cuid])
}

model SBOR_RecordCategory {
  cuid String @id @default(cuid())
  name String

  sbor_record SBOR_Record[]
}

// model Contestent_SBOR_Record {
//   record_id String
//   record    SBOR_Record @relation(fields: [record_id], references: [cuid])

//   contestent_id String
//   contestent    Contestent @relation(fields: [contestent_id], references: [cuid])

//   @@id([record_id, contestent_id])
// }

model SBOR_Record {
  cuid    String   @id @default(cuid())
  record  String
  remarks String?
  date    DateTime
  img_url String?
  link    String?
  contestent Contestent[]

  record_category_id String
  record_category    SBOR_RecordCategory @relation(fields: [record_category_id], references: [cuid])

  category_id String
  category    SBOR_Category @relation(fields: [category_id], references: [cuid])
}
